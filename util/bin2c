#!/usr/bin/env lua

-- code from http://lua-users.org/files/wiki_insecure/users/MarkEdgar/bin2c.lua

local description = [=[
Usage: util/bin2c filename varname

Write a C source file to standard output.  When this C source file is
included in another C source file, it has the effect of loading and
running the specified file at that point in the program.

The file named by 'filename' contains either Lua byte code or Lua source.
Its contents are used to generate the C output.  If + is used, then the
contents of 'filename' are first compiled before being used to generate
the C output.

This program is (overly) careful to generate output identical to the
output generated by bin2c5.1 from LuaBinaries.

http://lua-users.org/wiki/BinTwoCee
]=]

if not arg or not arg[1] or not arg[2] then
  return error(description)
end

local filename, varname = arg[1], arg[2]

local content = assert(io.open(filename, "rb")):read"*a"

local function boilerplate(fmt)
  return string.format(fmt,
    filename,
    varname)
end

local dump do
  local numtab={}; for i=0,255 do numtab[string.char(i)]=("%3d,"):format(i) end
  function dump(str)
    return (str:gsub(".", numtab):gsub(("."):rep(80), "%0\n"))
  end
end

io.write(boilerplate[=[
/* code automatically generated by bin2c -- DO NOT EDIT */
/* file: %s */
static const u_char %s[] = {
]=], dump(content), "};\n\n"
)
